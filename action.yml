name: "Tailscale ACL Sync"
description: "Deterministic ACL sync/tests using pinned gitops-pusher & Go, with smart Go setup and caching"
author: "0xmrwn"
branding:
  icon: "shield"
  color: "gray-dark"

inputs:
  tailnet:
    description: "Tailnet name (e.g., example.com)"
    required: true
  api-key:
    description: "Tailscale API key (expires in up to 90 days; prefer OAuth for long-lived setups)"
    required: false
  oauth-client-id:
    description: "Tailscale OAuth client ID (scope: acl)"
    required: false
  oauth-secret:
    description: "Tailscale OAuth client secret"
    required: false
  policy-file:
    description: "Path to HuJSON policy file"
    required: false
    default: ./policy.hujson
  action:
    description: "Action to take: test or apply"
    required: true
  gitops-pusher-version:
    description: "Version of tailscale.com/cmd/gitops-pusher to install (tag or commit)"
    required: false
    default: v1.86.4
  go-version:
    description: "Go version to ensure if needed (>=1.23). Default pins latest 1.23 patch."
    required: false
    default: "1.23.11"

runs:
  using: "composite"
  steps:
    - name: Validate auth inputs
      shell: bash
      run: |
        set -euo pipefail
        API="${{ inputs.api-key }}"
        OID="${{ inputs.oauth-client-id }}"
        OSECRET="${{ inputs.oauth-secret }}"
        if [[ -z "$API" && ( -z "$OID" || -z "$OSECRET" ) ]]; then
          echo "::error title=Auth missing::Provide either 'api-key' OR both 'oauth-client-id' and 'oauth-secret'."
          exit 1
        fi
        if [[ -n "$API" && ( -n "$OID" || -n "$OSECRET" ) ]]; then
          echo "::error title=Auth conflict::Use API key OR OAuth, not both."
          exit 1
        fi

    - name: Validate action input
      shell: bash
      run: |
        set -euo pipefail
        case "${{ inputs.action }}" in
          test|apply) ;;
          *) echo "::error title=Bad input::'action' must be 'test' or 'apply'"; exit 1 ;;
        esac

    - name: Check policy file exists
      shell: bash
      run: |
        set -euo pipefail
        if [[ ! -f "${{ inputs.policy-file }}" ]]; then
          echo "::error title=Missing policy file::'${{ inputs.policy-file }}' not found."
          exit 1
        fi

    - name: Probe local Go toolchain (>=1.23)
      id: probe-go
      shell: bash
      run: |
        set -euo pipefail
        need_setup=true
        if command -v go >/dev/null 2>&1; then
          ver="$(go version | awk '{print $3}' | sed 's/^go//')"
          # Compare versions (major.minor.patch) against 1.23.0
          parse() { IFS=. read -r a b c <<<"$1"; echo $((a*10000 + b*100 + ${c:-0})); }
          if (( $(parse "$ver") >= $(parse "1.23.0") )); then
            need_setup=false
          fi
        fi
        echo "needs_setup=${need_setup}" >> "$GITHUB_OUTPUT"

    - name: Setup Go (only if needed)
      if: steps.probe-go.outputs.needs_setup == 'true'
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}
        check-latest: true
        cache: true

    - name: Cache Go build & module caches
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go${{ inputs.go-version }}-gitops-${{ inputs.gitops-pusher-version }}
        restore-keys: |
          ${{ runner.os }}-go${{ inputs.go-version }}-gitops-

    - name: Install gitops-pusher (pinned)
      shell: bash
      env:
        GOTOOLCHAIN: local
      run: |
        set -euo pipefail
        echo "$HOME/go/bin" >> "$GITHUB_PATH"
        go install "tailscale.com/cmd/gitops-pusher@${{ inputs.gitops-pusher-version }}"
        command -v gitops-pusher >/dev/null || { echo "::error::gitops-pusher not on PATH"; exit 1; }

    - name: Run gitops-pusher
      shell: bash
      env:
        GOTOOLCHAIN: local
        TS_OAUTH_ID: "${{ inputs.oauth-client-id }}"
        TS_OAUTH_SECRET: "${{ inputs.oauth-secret }}"
        TS_API_KEY: "${{ inputs.api-key }}"
        TS_TAILNET: "${{ inputs.tailnet }}"
      run: |
        set -euo pipefail
        gitops-pusher --policy-file "${{ inputs.policy-file }}" "${{ inputs.action }}"
